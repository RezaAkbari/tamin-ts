{"attachment":[{"file_content":"ew0KICAicmVxdWlyZXMiIDogWw0KICAgICJQdWJsaWNfRnJvbVdvcmsubHVhIiAsDQogICAgIkRhdGVfRnJvbVdvcmsubHVhIiAsDQogICAgIkRhdGFiYXNlX0Zyb21Xb3JrLmx1YSINCiAgXSwNCg0KICAiYm90X25hbWUiOiAic3RhdHVzX3RvZG9fc3RlcF9ib3R5IiwNCg0KICAibGFuZ3VhZ2VzIiA6IHsNCiAgICAiZmEiOiB7DQogICAgICAiX21zZ19mYWxzZV9zdGF0dXMiIDogItmI2LbYuduM2Kog2YXYsdit2YTZhyDZiNin2KjYs9i32Ycg2LrbjNixINqp2KfZhdmEINmF24wg2KjYp9i02K8iICwNCiAgICAgICJfbXNnX3RydWVfc3RhdHVzIiA6ICLZiNi22LnbjNiqINmF2LHYrdmE2Ycg2YjYp9io2LPYt9mHICDaqdin2YXZhCDZhduMINio2KfYtNivIiAsDQogICAgICAiX21zZ19udWxsX3N0YXR1cyIgOiAi2YXYsdit2YTZhyDZiNin2KjYs9iq2Ycg2KfbjCDbjNin2YHYqiDZhti02K8iIA0KICAgIH0sDQogICAgImVuIjogew0KICAgICAgIl9tc2dfZmFsc2Vfc3RhdHVzIjogIlRoZSBzdGF0dXMgb2YgdGhlIGNvbm5lY3RlZCBzdGFnZSBpcyBub3QgY29tcGxldGUiLA0KICAgICAgIl9tc2dfdHJ1ZV9zdGF0dXMiOiAiVGhlIHN0YXR1cyBvZiB0aGUgY29ubmVjdGVkIHN0ZXAgaXMgY29tcGxldGUiICwNCiAgICAgICJfbXNnX251bGxfc3RhdHVzIjogIkRlcGVuZGVudCBzdGFnZSBub3QgZm91bmQiDQogICAgfQ0KICB9DQoNCn0=","mime":"application/json","name":"config.json"},{"file_content":"V0lUSA0KICAgIHRvZG9EYXRhIGFzICgNCiAgICAgICAgd2l0aA0KICAgICAgICAgICAgdG9kbyBhcyAoDQogICAgICAgICAgICAgICAgc2VsZWN0IGlkIGFzIHRhc2tfaWQgLCBUQVNLX1RJVExFICwgV09SS19GTE9XX0lEDQogICAgICAgICAgICAgICAgZnJvbSB0b2RvX3Rhc2sNCiAgICAgICAgICAgICAgICB7e3doZXJlVGFza319DQogICAgICAgICAgICApLA0KICAgICAgICAgICAgdG9kb19zdGVwcyBhcyAoDQogICAgICAgICAgICAgICAgc2VsZWN0IHQuKiAsDQogICAgICAgICAgICAgICAgICAgICAgIHR0cy5pZCByZWFsX3N0ZXAgLCAgdHRzLlNURVBfSUQgYXMgU1RFUF9JRDEgLCB0dHMuU1RBVFVTICwgdHRzLmlkIGFzIHN0ZXBfaWRfcmVhbA0KICAgICAgICAgICAgICAgIGZyb20gdG9kb190YXNrX3N0ZXBzIGFzIHR0cw0KICAgICAgICAgICAgICAgIGpvaW4gdG9kbyBhcyB0IG9uIHQudGFza19pZCA9IHR0cy5UQVNLX0lEIGFuZCB0dHMuV09SS19GTE9XX0lEID0gdC5XT1JLX0ZMT1dfSUQNCiAgICAgICAgICAgICAgICB7e3doZXJlVGFza1N0ZXB9fQ0KICAgICAgICAgICAgKQ0KICAgICAgICBzZWxlY3QgKiBmcm9tICB0b2RvX3N0ZXBzDQogICAgKSAsDQogICAgIHdvcmtmbG93RGF0YSBhcyAoDQogICAgICAgICB3aXRoDQogICAgICAgICAgICAgd3Jva2Zsb3cgYXMgKA0KICAgICAgICAgICAgICAgICBzZWxlY3QgdGQudGFza19pZCwgdGQuVEFTS19USVRMRSAsIHJlYWxfc3RlcCAsIFNURVBfSUQxICwNCiAgICAgICAgICAgICAgICAgICAgICAgIHR3LmlkIGFzIHdvcmtmbG93X2lkICwgdHcuV0ZfVElUTEUgYXMgd29ya2Zsb3dfdGl0bGUNCiAgICAgICAgICAgICAgICAgZnJvbSB0b2RvX3dvcmtmbG93IGFzIHR3DQogICAgICAgICAgICAgICAgIGpvaW4gdG9kb0RhdGEgYXMgdGQgb24gdHcuSUQgPSB0ZC5XT1JLX0ZMT1dfSUQNCiAgICAgICAgICAgICApLA0KICAgICAgICAgICAgIHdvcmtmbG93X3N0ZXBzIGFzICgNCiAgICAgICAgICAgICAgICAgc2VsZWN0IGRpc3RpbmN0IHcuKiAsDQogICAgICAgICAgICAgICAgICAgICAgICB0cy5pZCBhcyBzdGVwX3JlZl9pZCAsIHRzLlNUQVRVUyBhcyBzdGVwX3JlZl9zdGF0dXMgLCB0cy5TVEVQX05BTUUgYXMgc3RlcF9yZWZfbmFtZQ0KICAgICAgICAgICAgICAgICBmcm9tIHRvZG9fc3RlcCBhcyB0cw0KICAgICAgICAgICAgICAgICBqb2luIHdyb2tmbG93IGFzIHcgb24gdy53b3JrZmxvd19pZCA9IHRzLldGX0lEIGFuZCB0cy5pZCA9IHcuU1RFUF9JRDENCiAgICAgICAgICAgICApLA0KICAgICAgICAgICAgIHJlbHMgYXMgKA0KICAgICAgICAgICAgICAgICBzZWxlY3Qgd3MuKiAsIHR3ci5TVEVQX0lEMg0KICAgICAgICAgICAgICAgICBmcm9tIHdvcmtmbG93X3N0ZXBzIGFzIHdzDQogICAgICAgICAgICAgICAgIGpvaW4gdG9kb193b3JrZmxvd19yZWxhdGlvbiBhcyB0d3Igb24gd3Muc3RlcF9yZWZfaWQgPSB0d3IuU1RFUF9JRDENCiAgICAgICAgICAgICApDQogICAgICAgICBzZWxlY3QgZGlzdGluY3QgKiBmcm9tIHJlbHMNCiAgICAgKSAsDQogICAgIG5leHRTdGVwIGFzICgNCiAgICAgICAgIHNlbGVjdCB3ZC5yZWFsX3N0ZXAsDQogICAgICAgICAgICAgICAgd2QudGFza19pZCAsIHdkLlRBU0tfVElUTEUgLCB3ZC53b3JrZmxvd19pZCAsIHdkLndvcmtmbG93X3RpdGxlICwNCiAgICAgICAgICAgICAgICB3ZC5zdGVwX3JlZl9pZCAgLCAgd2Quc3RlcF9yZWZfbmFtZSAgLCBzdGVwX3JlZl9zdGF0dXMgLA0KICAgICAgICAgICAgICAgIHR0cy5TVEVQX0lEIGFzIHN0ZXBfcmVsX2lkICwgdHRzLlNUQVRVUyBhcyBzdGVwX3JlbF9zdGF0dXMNCiAgICAgICAgIGZyb20gdG9kb190YXNrX3N0ZXBzIGFzIHR0cw0KICAgICAgICAgam9pbiB3b3JrZmxvd0RhdGEgYXMgd2Qgb24gd2QuU1RFUF9JRDIgPSB0dHMuU1RFUF9JRCBhbmQgd2QudGFza19pZCA9IHR0cy5UQVNLX0lEIGFuZCB0dHMuV09SS19GTE9XX0lEID0gd2Qud29ya2Zsb3dfaWQNCiAgICAgKQ0Kc2VsZWN0IHt7c2VsZWN0fX0NCiBmcm9tIG5leHRTdGVwDQoNCg==","mime":"text/plain","name":"query_get_data_step.txt"},{"file_content":"","mime":"text/plain","name":"Public_FromWork.lua"},{"file_content":"","mime":"text/plain","name":"Date_FromWork.lua"},{"file_content":"","mime":"text/plain","name":"Database_FromWork.lua"}],"bytecode_command":"","command":"-- botName = status_todo_step_boty\r\n-- creator = mehdi-marefiyan\r\n-- date = 7/17/2024\r\n-- version= 0.1\r\n------------------\r\nlocal defaultStaustRunBots = true;\r\n\r\n\r\n_boxAttachment = {\r\n    attachments = {}\r\n};\r\nfunction _boxAttachment.getAttachment(fileName , isTable)\r\n    for key, code in pairs(_boxAttachment.attachments) do\r\n        if key == fileName then\r\n            return code;\r\n        end\r\n    end\r\n\r\n    local configJson = teamyar.get_attachment(fileName);\r\n    if configJson~= nil then\r\n        local result = configJson;\r\n        if isTable ~= nil and isTable == true then\r\n            result = json.decode(configJson);\r\n        end\r\n        _boxAttachment.attachments[fileName] = result;\r\n        return result;\r\n    end\r\n\r\n    return nil;\r\nend\r\n\r\n\r\n_render = {};\r\nfunction _render:init(files)\r\n    _render.files = files;\r\n    _render.libs = {};\r\n    return self;\r\nend\r\nfunction _render:renderFile(code)\r\n    if type(code) == \"table\" then\r\n        if code.file ~= nil then\r\n            code = code.file;\r\n        end\r\n    end\r\n    code = _boxAttachment.getAttachment(code);\r\n    local loadedFunction, errorMessage = load(code)\r\n    if loadedFunction then\r\n        local result = loadedFunction();\r\n        if result ~= nil then\r\n            table.insert(_render.libs , result);\r\n        end\r\n    else\r\n        teamyar.write_log(\"Error: \" .. errorMessage);\r\n    end\r\n    return self;\r\nend\r\nfunction _render.run()\r\n    for x = 1 , #_render.files , 1   do\r\n        local item = _render.files[x];\r\n        if item ~= nil then\r\n            _render:renderFile(item);\r\n        end\r\n    end\r\n    return _render.libs;\r\nend\r\n\r\n\r\n\r\n----------------\r\nlocal request_products = {};\r\nfunction request_products:init()\r\n    self.config = {};\r\n    self.requires = {};\r\n    self.libs = {};\r\n    ---\r\n    self.task_id = nil;\r\n    self.task_step_id = nil;\r\n    ---\r\n    self.step_data = nil;\r\n    return self;\r\nend\r\nfunction request_products:getConfig()\r\n    request_products.config = _boxAttachment.getAttachment(\"config.json\" , true);\r\n    return self;\r\nend\r\nfunction request_products:getRequires()\r\n    if request_products.config ~= nil and  request_products.config.requires ~= nil then\r\n        request_products.requires = request_products.config.requires;\r\n    end\r\n    return self;\r\nend\r\n\r\nfunction request_products:setLibraries()\r\n    request_products.libs = _render:init(request_products.requires).run();\r\n    return self;\r\nend\r\nfunction request_products:getParams()\r\n    setParamToObject(request_products ,'task_id' , \"number\" , 0);\r\n    setParamToObject(request_products ,'task_step_id' , \"number\" , 0);\r\n    return self;\r\nend\r\nfunction request_products:runQueryTask()\r\n\r\n    local query = _boxAttachment.getAttachment(\"query_get_data_step.txt\");\r\n    local params = {};\r\n\r\n    query , params = whereQuery:init()\r\n            :addSqlWhere( tonumber(request_products.task_id ), \"id=?\" , false)\r\n            .run(query , params ,\"{{whereTask}}\");\r\n\r\n    query , params = whereQuery:init()\r\n            :addSqlWhere( tonumber(request_products.task_step_id ), \"tts.id=?\" , false)\r\n            .run(query , params ,\"{{whereTaskStep}}\");\r\n\r\n    request_products.step_data  = baseQuery:init()\r\n            :setQuery(query)\r\n            :setFirst(1)\r\n            :setSelects({ column= 'step_rel_status' , alias= 'step_rel_status' })\r\n            :setParams(params)\r\n            .fetch();\r\n  \r\n  teamyar.write_log(query);\r\n  teamyar.write_log(json.encode(params));\r\n  teamyar.write_log(json.encode(request_products.step_data ));\r\n  \r\n    return self;\r\nend\r\nfunction request_products.returnStatusCheck()\r\n    local resultExp = {\r\n        status = defaultStaustRunBots ,\r\n        msg = language_tools.translateWord(\"_msg_null_status\" , \"\")\r\n    }\r\n\r\n    if request_products.step_data~= nil and request_products.step_data.step_rel_status~=nil then\r\n        local status = request_products.step_data.step_rel_status;\r\n        if status == 1 then\r\n            resultExp.status = false;\r\n            resultExp.msg = language_tools.translateWord(\"_msg_true_status\" , \"\");\r\n        else\r\n            resultExp.status = true;\r\n            resultExp.msg = language_tools.translateWord(\"_msg_false_status\" , \"\");\r\n        end\r\n    end\r\n    teamyar.write_log(json.encode(resultExp));\r\n    return bot_coding.jsonCodding(resultExp);\r\nend\r\n\r\nfunction request_products.run()\r\n    request_products:getConfig():getRequires():setLibraries():getParams():runQueryTask();\r\n    return request_products.returnStatusCheck();\r\nend\r\n\r\nteamyar.write_result(request_products:init().run())","form_setting":"{\"layout\":{\"width_title\":3,\"col\":\"COL-2\",\"seperator\":\"\"},\"info\":[],\"schema\":{},\"default_value\":{}}","info":{"async_deadline_run":0,"async_run":0,"cache_time":0,"color":"","db_prefix":"","description":"","domain":"test.tsco.ir","icon":"","id":424,"license_id":0,"max_execute_time":100,"modify_date":133659533875189053,"name":"بات بررسی وضعیت مرحله باتی اقدام","not_showing_in_iframe":1,"open_source":1,"public_access":1,"relateds":[],"result_type":1,"run_path":"332/status_todo_step_boty","show_in_portal_menu":1,"show_in_widget":1,"subsystem":[]}}